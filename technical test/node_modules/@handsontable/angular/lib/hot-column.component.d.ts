import { OnInit, OnChanges, OnDestroy } from '@angular/core';
import { HotTableComponent } from './hot-table.component';
import Handsontable from 'handsontable';
import * as ɵngcc0 from '@angular/core';
export declare class HotColumnComponent implements OnInit, OnChanges, OnDestroy {
    private parentComponent;
    private firstRun;
    allowEmpty: Handsontable.ColumnSettings['allowEmpty'];
    allowHtml: Handsontable.ColumnSettings['allowHtml'];
    allowInvalid: Handsontable.ColumnSettings['allowInvalid'];
    checkedTemplate: Handsontable.ColumnSettings['checkedTemplate'];
    className: Handsontable.ColumnSettings['className'];
    columnSorting: Handsontable.ColumnSettings['columnSorting'];
    colWidths: Handsontable.ColumnSettings['colWidths'];
    commentedCellClassName: Handsontable.ColumnSettings['commentedCellClassName'];
    copyable: Handsontable.ColumnSettings['copyable'];
    correctFormat: Handsontable.ColumnSettings['correctFormat'];
    data: Handsontable.ColumnSettings['data'];
    dateFormat: Handsontable.ColumnSettings['dateFormat'];
    defaultDate: Handsontable.ColumnSettings['defaultDate'];
    editor: Handsontable.ColumnSettings['editor'];
    filteringCaseSensitive: Handsontable.ColumnSettings['filteringCaseSensitive'];
    invalidCellClassName: Handsontable.ColumnSettings['invalidCellClassName'];
    label: Handsontable.ColumnSettings['label'];
    language: Handsontable.ColumnSettings['language'];
    noWordWrapClassName: Handsontable.ColumnSettings['noWordWrapClassName'];
    numericFormat: Handsontable.ColumnSettings['numericFormat'];
    placeholder: Handsontable.ColumnSettings['placeholder'];
    placeholderCellClassName: Handsontable.ColumnSettings['placeholderCellClassName'];
    readOnly: Handsontable.ColumnSettings['readOnly'];
    readOnlyCellClassName: Handsontable.ColumnSettings['readOnlyCellClassName'];
    renderer: Handsontable.ColumnSettings['renderer'];
    selectOptions: Handsontable.ColumnSettings['selectOptions'];
    skipColumnOnPaste: Handsontable.ColumnSettings['skipColumnOnPaste'];
    sortByRelevance: Handsontable.ColumnSettings['sortByRelevance'];
    source: Handsontable.ColumnSettings['source'];
    strict: Handsontable.ColumnSettings['strict'];
    title: Handsontable.ColumnSettings['title'];
    trimDropdown: Handsontable.ColumnSettings['trimDropdown'];
    type: Handsontable.ColumnSettings['type'];
    uncheckedTemplate: Handsontable.ColumnSettings['uncheckedTemplate'];
    validator: Handsontable.ColumnSettings['validator'];
    visibleRows: Handsontable.ColumnSettings['visibleRows'];
    width: Handsontable.ColumnSettings['width'];
    wordWrap: Handsontable.ColumnSettings['wordWrap'];
    constructor(parentComponent: HotTableComponent);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HotColumnComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HotColumnComponent, "hot-column", never, { "allowEmpty": "allowEmpty"; "allowHtml": "allowHtml"; "allowInvalid": "allowInvalid"; "checkedTemplate": "checkedTemplate"; "className": "className"; "columnSorting": "columnSorting"; "colWidths": "colWidths"; "commentedCellClassName": "commentedCellClassName"; "copyable": "copyable"; "correctFormat": "correctFormat"; "data": "data"; "dateFormat": "dateFormat"; "defaultDate": "defaultDate"; "editor": "editor"; "filteringCaseSensitive": "filteringCaseSensitive"; "invalidCellClassName": "invalidCellClassName"; "label": "label"; "language": "language"; "noWordWrapClassName": "noWordWrapClassName"; "numericFormat": "numericFormat"; "placeholder": "placeholder"; "placeholderCellClassName": "placeholderCellClassName"; "readOnly": "readOnly"; "readOnlyCellClassName": "readOnlyCellClassName"; "renderer": "renderer"; "selectOptions": "selectOptions"; "skipColumnOnPaste": "skipColumnOnPaste"; "sortByRelevance": "sortByRelevance"; "source": "source"; "strict": "strict"; "title": "title"; "trimDropdown": "trimDropdown"; "type": "type"; "uncheckedTemplate": "uncheckedTemplate"; "validator": "validator"; "visibleRows": "visibleRows"; "width": "width"; "wordWrap": "wordWrap"; }, {}, never, never>;
}

//# sourceMappingURL=hot-column.component.d.ts.map